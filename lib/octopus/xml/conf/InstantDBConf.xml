<?xml version="1.0" encoding="UTF-8"?>
<LoaderConf>
<!-- =======================================================================================
        
 LoaderGenerator InstantDB database vendor configuration file.

 ======================================================================================== -->

<!--
 The Database type used to store ObjectId's and Version'c
-->
    <OidDbType>DECIMAL (19,0)</OidDbType>
    <VersionDbType>BIGINT</VersionDbType>    
<!--
 The OidDbColumnName, VersionDbColumnName are used for generating the SQL CREATE TABLE
 statements in the create_tables.sql and <classname>SQL.sql files
-->    
    <OidDbColumnName>oid</OidDbColumnName>    
    <VersionDbColumnName>version</VersionDbColumnName>
    

<!-- ExcludeTables - defines system tables which you want to exclude for reading -->    
    
    <ExcludeTables></ExcludeTables>

<!-- DateFormat
G  Era designator  Text  AD  
y  Year  Year  1996; 96  
M  Month in year  Month  July; Jul; 07  
w  Week in year  Number  27  
W  Week in month  Number  2  
D  Day in year  Number  189  
d  Day in month  Number  10  
F  Day of week in month  Number  2  
E  Day in week  Text  Tuesday; Tue  
a  Am/pm marker  Text  PM  
H  Hour in day (0-23)  Number  0  
k  Hour in day (1-24)  Number  24  
K  Hour in am/pm (0-11)  Number  0  
h  Hour in am/pm (1-12)  Number  12  
m  Minute in hour  Number  30  
s  Second in minute  Number  55  
S  Millisecond  Number  978  
z  Time zone  General time zone  Pacific Standard Time; PST; GMT-08:00  
Z  Time zone  RFC 822 time zone  -0800  

Example:
"yyyy-MM-dd HH:mm:ss.SSS"	"2004-05-24 12:12:12.111"
"yyyy.MM.dd G 'at' HH:mm:ss z"  "2001.07.04 AD at 12:08:56 PDT"
"EEE, MMM d, ''yy"		"Wed, Jul 4, '01"
"yyyyy.MMMMM.dd GGG hh:mm aaa"  "02001.July.04 AD 12:08 PM" 

If date format isn't given, default date format is "MM/dd/yyyy hh:mm:ss".    
-->

    <DateFormat>yyyy-MM-dd HH:mm:ss.SSS</DateFormat>

<!--  Driver name -Driver name-->
<!--  ClassName - Driver class-->
<!--  Connection - Connection for the database-->
<!--  RequiredUser = "true/false" - if database requires ures and password for connecting-->
<!--  FirstColumnResult = "0/1" - first column in result set-->
<!--  EnableJumpInResult = "true/false" - if jdbc driver supports absolute(int) and relative(int) methods - jump in result set -->
<!--  AfterLastRow = "true/false"  - if jdbc driver supports moving pointer after the last row in result set-->
<!--  EnableOrderBy = "true/false" - if jdbc driver supports "order by" sql statements in sql commands.-->
<!--  AlterTablePrimaryKey -defines if the database support ALTER TABLE sql statemnts for creating the pirmary key.-->    
<!--  MetaData -defines if the database support reading all meta data .-->    
<!--  RowCountEnabled -defines if the database support count(*) method for counting the rows in database table.-->    
<!--  SetFetchSizeEnabled -defines if the database support setFetchSize() method.-->    
<!--  SetCursorNameEnabled -defines if the database support setCursorName() method. -->
<!--  SetEmptyStringAsNull - defines the possibility to convert an empty string to 'null' object or not-->
<!--  ReadingOrderRelevant - defines if order of reading data from source database is relevant or not -->
<!--  FileSystemDatabase - defines if this driver read/write on file system -->
<!--  MaxConstraintLength - defines max length of the name of constraint (primary key,index,..) -->
<!--  GetColumnsSupported - defines if this driver suport Connection.getMetaData().getColumns() method -->
<!--  SetMaxRowsSupported - defines if this driver support java.sql.Statement.setMaxRows().Used for target database because of better performance. -->

    <Driver name="idb">
        <ClassName value="org.enhydra.instantdb.jdbc.idbDriver"/>
        <Connection value="jdbc:idb:"/>  
        <RequiredUser value="false"/>
        <FirstColumnResult value="1"/>
        <EnableJumpInResult value="false"/>
        <AfterLastRow value="true"/>
        <EnableOrderBy value="true"/>
        <AlterTablePrimaryKey value="true"/>
        <MetaData value="true"/> 
        <RowCountEnabled value="false"/>
        <SetFetchSizeEnabled value="false"/>
        <SetCursorNameEnabled value="false"/>
        <SetEmptyStringAsNull value="false"/>
        <ReadingOrderRelevant value="false"/>
        <FileSystemDatabase value="false"/>
        <MaxConstraintLength value="-1"/>
        <GetColumnsSupported value="false"/>
        <SetMaxRowsSupported value="false"/>
    </Driver>    

<!--    
Here we map vendor-specific data types to JDBC types.

Attributes:

isBinary - attribute is used to determine is this type binary or not 
(isBinaryObject=true/false)

isNumber - attribute is used to determine if type is number or not 
(isNumber=true/false)

hasSize - attribute is used to determine if type has defined size or not(hasSize=true/false). 
This attribute is used by Octopus Generator. If attribute hasSize=false OctopusGenerator 
will generate sql scripts without size for this type.  

isDecimal - attribute is used to determine if type is decimal or not. 
(isDecimal=true/false)

isDate - attribute is used to determine if this type is date.
(isDate=true/false)

javaType - appropriate java type for this SQL type

NOTE:See documentation for more details.
-->
    
    <SQLType>
        <BYTE javaType="java.lang.Byte">CHAR</BYTE>
        <TINYINT javaType="java.lang.Byte">TINYINT</TINYINT>
        <BIT javaType="java.lang.Byte">BIT</BIT>
        <BOOLEAN hasSize="true" javaType="java.lang.Boolean">BOOLEAN</BOOLEAN>
        <INT isNumber="true" javaType="java.lang.Integer">INTEGER</INT>
        <INTEGER javaType="java.lang.Integer">INTEGER</INTEGER>
        <SHORT isNumber="true" hasSize="true" javaType="java.lang.Short">INTEGER</SHORT>
        <SMALLINT isNumber="true" javaType="java.lang.Integer">SMALLINT</SMALLINT>        		
        <LONG isNumber="true" javaType="java.lang.Long">FLOAT</LONG>
        <DECIMAL isDecimal="true" isNumber="true" hasSize="true" javaType="java.math.BigDecimal">DECIMAL</DECIMAL>
        <NUMERIC isNumber="true" hasSize="true" javaType="java.math.BigDecimal">NUMERIC</NUMERIC>
        <CURRENCY hasSize="true" javaType="none">NONE</CURRENCY>
        <DOUBLE isNumber="true" javaType="java.lang.Double">DOUBLE</DOUBLE>
        <FLOAT isNumber="true" hasSize="true" javaType="java.lang.Float">FLOAT</FLOAT>
        <DATE isDate="true" javaType="java.sql.Date">DATE</DATE>
        <DATETIME isDate="true" javaType="java.sql.Timestamp">DATE</DATETIME>
        <TIME isDate="true" javaType="java.sql.Time">TIME</TIME>
        <TIMESTAMP isDate="true" javaType="java.sql.Timestamp">TIMESTAMP</TIMESTAMP>
        <CHAR hasSize="true" javaType="java.lang.String">CHAR</CHAR>
        <VARCHAR hasSize="true" javaType="java.lang.String">VARCHAR</VARCHAR>
        <VARCHAR2 hasSize="true" javaType="java.lang.String">VARCHAR</VARCHAR2>
        <SMALLCHAR hasSize="true" javaType="java.lang.String">CHAR</SMALLCHAR>
        <BINARY isBinary="true" javaType="byte[]">BINARY</BINARY>
        <VARBINARY isBinary="true" hasSize="true" javaType="byte[]">VARBINARY</VARBINARY>
        <LONGVARBINARY isBinary="true" hasSize="true" javaType="byte[]">LONGVARBINARY</LONGVARBINARY>
        <OLE hasSize="true" javaType="none">NONE</OLE>
        <LONGCHAR hasSize="true" javaType="java.lang.String">LONGVARCHAR</LONGCHAR>
        <TEXT javaType="java.lang.String">VARCHAR</TEXT>
        <IMAGE isBinary="true" javaType="byte[]">LONGVARBINARY</IMAGE>
    </SQLType>

<!--
 Here we map JDBC types to vendor-specific data types.
 For almost all vendors, the JDBC types BIT, TINYINT, SMALLINT and BIGINT
 are mapped to the data type INTEGER.
 For most vendors, these types are actually INTEGER.
 The following entries can be changed to impose size restrictions.
 For example, to specify an actual size for a TINYINT, make the change:
       Database.JDBCtype.TINYINT.Oracle="DECIMAL(4,0)"
 Note that the "set" methods in the DO classes generated by DODS
 do not test for size restrictions on integer values.
 
-->    
        
    <JDBCType>
        <BIT>BIT</BIT>
        <BIGINT>INTEGER</BIGINT>
        <BINARY>BINARY</BINARY>
        <BLOB>NONE</BLOB>
        <BOOLEAN>BOOLEAN</BOOLEAN>
        <CHAR>CHAR</CHAR>
        <CLOB>NONE</CLOB>
        <DATE>DATE</DATE>
        <DECIMAL>DECIMAL</DECIMAL>
        <DOUBLE>DOUBLE</DOUBLE>
        <FLOAT>FLOAT</FLOAT>
        <INTEGER>INTEGER</INTEGER>
        <LONGVARBINARY>LONGVARBINARY</LONGVARBINARY>
        <LONGVARCHAR>LONGCHAR</LONGVARCHAR>
        <NUMERIC>NUMERIC</NUMERIC>
        <REAL>NONE</REAL>
        <SMALLINT>SMALLINT</SMALLINT>
        <TIME>TIME</TIME>
        <TIMESTAMP>TIMESTAMP</TIMESTAMP>
        <TINYINT>TINYINT</TINYINT>
        <VARBINARY>VARBINARY</VARBINARY>
        <VARCHAR>VARCHAR</VARCHAR>        
    </JDBCType>
    
<!--    
Here we map JDBC types to JAVA classes.    
-->    
    
    <JAVAType>
        <BIT>java.lang.Boolean</BIT>
        <BIGINT>java.lang.Long</BIGINT>
        <BINARY>java.lang.Byte[]</BINARY>
        <BLOB>java.sql.BLob</BLOB>        
        <BOOLEAN>java.lang.Boolean</BOOLEAN>
        <CHAR>java.lang.String</CHAR>
        <CLOB>java.sql.Clob</CLOB>
        <DATE>java.sql.Date</DATE>
        <DECIMAL>java.math.BigDecimal</DECIMAL>
        <DOUBLE>java.lang.Double</DOUBLE>
        <FLOAT>java.lang.Double</FLOAT>
        <INTEGER>java.lang.Integer</INTEGER>
        <LONGVARBINARY>java.lang.Byte[]</LONGVARBINARY>
        <LONGVARCHAR>java.lang.String</LONGVARCHAR>
        <NUMERIC>java.math.BigDecimal</NUMERIC>
        <REAL>java.lang.Float</REAL>
        <SMALLINT>java.lang.Short</SMALLINT>
        <TIME>java.sql.Time</TIME>
        <TIMESTAMP>java.sql.Timestamp</TIMESTAMP>
        <TINYINT>java.lang.Byte</TINYINT>
        <VARBINARY>java.lang.Byte[]</VARBINARY>
        <VARCHAR>java.lang.String</VARCHAR>        
    </JAVAType>
    
</LoaderConf>
